// src/pages/user/UserCourse/hooks/useUserCourse.hooks.ts
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { toast } from "react-toastify";
import { UserCourseApi } from "src/pages/user/MyCourses/apis/user-courses.apis";

/** üü¢ Ghi danh v√†o kh√≥a h·ªçc */
export const useEnrollCourse = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: UserCourseApi.enrollCourse,
    onSuccess: () => {
      toast.success("ƒê√£ ghi danh v√†o kh√≥a h·ªçc!");
      queryClient.invalidateQueries({ queryKey: ["user-courses"] });
    },
    onError: () => toast.error("Kh√¥ng th·ªÉ ghi danh v√†o kh√≥a h·ªçc."),
  });
};

/** üîµ L·∫•y danh s√°ch kh√≥a h·ªçc c·ªßa user */
export const useGetCoursesByUser = (user_id: string) => {
  return useQuery({
    queryKey: ["user-courses", user_id],
    queryFn: () => UserCourseApi.getCoursesByUser(user_id),
    enabled: !!user_id,
  });
};

/** üü£ C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªçc */
export const useUpdateUserCourseStatus = () => {
  const queryClient = useQueryClient();
  return useMutation({
    mutationFn: ({
      id,
      status,
    }: {
      id: string;
      status: "in_progress" | "completed";
    }) => UserCourseApi.updateStatus(id, status),
    onSuccess: () => {
      toast.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªçc th√†nh c√¥ng!");
      queryClient.invalidateQueries({ queryKey: ["user-courses"] });
    },
    onError: () => toast.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i."),
  });
};
